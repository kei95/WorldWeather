{"version":3,"sources":["images/fog.jpg","images/sunny.jpg","images/rain.jpg","images/cloud.jpg","images/snow.jpg","images/Thunderstorm.jpg","Components/WeatherCard.js","Components/Title.js","Components/Form.js","Components/WeatherModel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","WeatherCard","state","pic","this","props","weather","description","cloud","sunny","rain","snow","fog","thunderstorm","Card","style","width","Img","className","variant","src","picPicture","Body","Title","city","country","Text","currentTem","tempMax","tempMin","humidity","Button","onClick","delete","React","Component","Form","onSubmit","getWeather","value","onChange","e","handleChange","target","type","name","placeholder","handleSubmit","error","WeatherModel","time","API_KEY","App","undefined","isReady","weathers","cityName","newWeatherArr","filter","item","console","log","length","setState","a","preventDefault","elements","fetch","api_call","json","data","newWeather","sys","main","temp","temp_max","temp_min","timezone","some","newWeathersArr","map","index","key","display","maxWidth","marginBottom","renderWeatherCards","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64724d29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fog.48176158.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sunny.34ebe320.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain.b6a831fd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cloud.6607a363.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow.97e70aac.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Thunderstorm.b52b807a.jpg\";","import React from 'react'\nimport rain from '../images/rain.jpg'\nimport cloud from '../images/cloud.jpg'\nimport sunny from '../images/sunny.jpg'\nimport snow from '../images/snow.jpg'\nimport fog from '../images/fog.jpg'\nimport thunderstorm from '../images/Thunderstorm.jpg'\nimport './Css/WeatherCard.css'\nimport { Card, Button } from 'react-bootstrap'\n\nclass WeatherCard extends React.Component {\n    state = {\n        pic: null\n    }\n\n    picPicture() {\n        switch (this.props.weather.description) {\n            case \"Clouds\":\n                return cloud\n            case \"Clear\":\n                return sunny\n            case \"Rain\":\n                return rain\n            case \"Snow\":\n                return snow\n            case \"Fog\":\n                return fog\n            case \"Mist\":\n                return fog\n            case \"Thunderstorm\":\n                return thunderstorm\n            case \"Haze\":\n                return fog\n            default:\n                return sunny\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Img className=\"CardImage\" variant=\"top\" src={this.picPicture()} />\n                        <Card.Body>\n                            <Card.Title>{this.props.weather.city}, {this.props.weather.country}</Card.Title>\n                            <Card.Text>\n                                Weather:<br />\n                                {this.props.weather.description}<br />\n                                <br />\n                                CurrentTemperture:<br />\n                                {this.props.weather.currentTem} ℃<br />\n                                <br />\n                                MaxTemperture:<br />\n                                {this.props.weather.tempMax} ℃<br />\n                                <br />\n                                MinTemperture:<br />\n                                {this.props.weather.tempMin} ℃<br />\n                                <br />\n                                Humidity:<br />\n                                {this.props.weather.humidity} %\n                            </Card.Text>\n                            <Button onClick={() => this.props.delete(this.props.weather.city)}>Delete</Button>\n                        </Card.Body>\n                    </Card>\n            </div>\n        );\n    }\n}\nexport default WeatherCard;","import React from \"react\";\n\n\n        const Title = () => (\n            <div>\n                <h1>Weather Repoter</h1>\n                <p>Find out temperture, condtions and more...</p>\n            </div>\n        );\n\n\nexport default Title","import React from 'react';\nimport './Css/Form.css'\n\nclass Form extends React.Component {\n\n    render() {\n        return(\n            <form onSubmit={this.props.getWeather}>\n            <input value={this.props.city} onChange={e => this.props.handleChange(e.target.value)} type=\"text\" name=\"city\" placeholder=\"Enter City...\" />\n            <button onClick={this.handleSubmit}>submit</button>\n            {this.props.error ? <h3 className=\"errorMessage\">{this.props.error}</h3> : null}\n        </form>);\n    }\n\n}\n\nexport default Form;","class WeatherModel {\n    \n    constructor(country, city, humidity, currentTem, tempMax, tempMin, description, time){\n        this.country = country;\n        this.city = city;\n        this.currentTem = currentTem;\n        this.tempMax = tempMax;\n        this.tempMin = tempMin\n        this.humidity = humidity;\n        this.description = description;\n        this.time = time;\n    }\n}\n\nexport default WeatherModel","import React from \"react\";\nimport WeatherCard from \"./Components/WeatherCard\"\nimport Title from \"./Components/Title\";\nimport Form from \"./Components/Form\";\nimport WeatherModel from './Components/WeatherModel'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst API_KEY = \"17116ccb6b8729ea246236b105e9a474\"\n\nclass App extends React.Component {\n\n  state = {\n    error: undefined,\n    isReady: false,\n    weathers: [],\n    city: \"\"\n  }\n\n  weather = null\n\n  delete = (cityName) => {\n      let newWeatherArr = this.state.weathers.filter(item=> item.city !== cityName)\n      console.log(newWeatherArr)\n      if (this.state.weathers.length !== 0) {\n      this.setState({\n        weathers: newWeatherArr,\n      })\n    } else {\n      newWeatherArr = []\n      this.setState({\n        weathers: newWeatherArr,\n      })\n    }\n  } \n\n  getWeather = async (e) => {\n    try {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},Japan&appid=${API_KEY}&units=metric`);\n      const data = await api_call.json();\n      console.log(data)\n      this.setState({\n        city: \"\"\n      })\n      if(city){\n      let newWeather = new WeatherModel(\n          data.sys.country,\n          data.name, \n          data.main.humidity,\n          data.main.temp,\n          data.main.temp_max,\n          data.main.temp_min, \n          data.weather[0].main,\n          data.timezone)\n  \n          if (!this.state.weathers.some(e => e.city === newWeather.city)){\n            let newWeathersArr = [...this.state.weathers, newWeather]\n            this.setState({\n              error: \"\",\n              isReady: true,\n              weathers: newWeathersArr\n            })\n          } else {\n            this.setState({\n              error: \"You have same city already\"\n            })\n          }\n      } else {\n        this.setState({\n          error: \"Please enter the value\"\n        })\n      }\n      console.log(this.state.weathers)\n    } catch (error) {\n      this.setState({\n        error: \"This city does not exist. make sure there's no typo\"\n      })\n    } \n\n  }\n\n  handleChange = (e) => {\n    this.setState({\n        city: e\n    })\n}\n\n  renderWeatherCards() {\n    let cards = this.state.weathers.map((item, index) => <div key={index}><WeatherCard index={index} delete={this.delete} weather={item}/></div>)\n    return cards\n  }\n\n  render() {\n    return(<div style={{display: 'absolute', width: '100vh', maxWidth: '100vh'}}>\n      <Title />\n        <Form handleChange={this.handleChange}  city={this.state.city} error={this.state.error} getWeather={this.getWeather} style={{ marginBottom: '6rem' }}/>\n        <div className='cardsContainer'>\n          <div className='cardsContainer_holizontal'>\n            {this.state.isReady && this.renderWeatherCards()}\n          </div>\n        </div>\n    </div>);\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}